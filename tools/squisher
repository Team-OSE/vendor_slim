#!/bin/bash
#
# Squish a CM otapackage for distribution
# cyanogen
#

. ${ANDROID_BUILD_TOP}/vendor/ose/tools/colors

OUT_TARGET_HOST=`uname -a | grep Darwin`
if [ -z "$OUT_TARGET_HOST" ]
then
   OUT_TARGET_HOST=linux-x86
   MD5=md5sum
   XARGS="xargs --max-args=1 --max-procs `grep 'processor' /proc/cpuinfo|wc -l`"
   SED=sed
else
   OUT_TARGET_HOST=darwin-x86
   MD5=md5
   XARGS="xargs -n 1 -P `sysctl hw.ncpu | awk '{print $2}'`"
   SED=gsed
fi

if [ -z "$OUT" -o ! -d "$OUT" ]; then
	echo -e ${red}"ERROR: $0 only works with a full build environment. $OUT should exist."${txtrst}
	exit 1
fi

if [ "$TARGET_BUILD_TYPE" = "debug" ]; then
    OTAPACKAGE=$OUT/${TARGET_PRODUCT}_debug-ota-$TARGET_BUILD_VARIANT.$USER.zip
elif [ "$TARGET_BUILD_VARIANT" = "userdebug" ]; then
    OTAPACKAGE=$OUT/$TARGET_PRODUCT-ota-eng.$USER.zip
else
    OTAPACKAGE=$OUT/$TARGET_PRODUCT-ota-$TARGET_BUILD_VARIANT.$USER.zip
fi
if [ ! -f "$OTAPACKAGE" ]; then
	echo -e ${red}"$OTAPACKAGE doesn't exist!"${txtrst};
	exit 1
fi

OPTICHARGER=$ANDROID_BUILD_TOP/vendor/ose/tools/opticharger
QUIET=-q
DELETE_BINS="applypatch applypatch_static check_prereq recovery updater"

REPACK=$OUT/repack.d
printf "Sanitizing environment..."
rm -rf $REPACK
mkdir -p $REPACK
echo


# Unpack the otapackage and opticharge all apks
mkdir $REPACK/ota
(
cd $REPACK/ota
printf "Unpacking $OTAPACKAGE..."
unzip $QUIET $OTAPACKAGE
echo

# Move all apks to the same directory so xargs can
# use also with framework-res.apk. This allow process
# framework-res.apk in parallel with other apks
mkdir -p $REPACK/parallel
cd $REPACK/parallel
cp $REPACK/ota/system/framework/framework-res.apk .
cp $REPACK/ota/system/app/*.apk .
for f in $REPACK/ota/system/priv-app/*.apk; do
    cp $f ./priv-app-$(basename $f)
done


# Do optimization in parallel
find ./ -name \*.apk | $XARGS $OPTICHARGER

# Move optimized apks to repack directory
mv -f $REPACK/parallel/framework-res.apk $REPACK/ota/system/framework/framework-res.apk
for f in $REPACK/parallel/priv-app*.apk; do
    mv $f $REPACK/ota/system/priv-app/$(basename $f | cut -d'-' -f3)
done
mv -f $REPACK/parallel/*.apk $REPACK/ota/system/app/

# Return to directory
cd $REPACK/ota
rm -rf $REPACK/parallel
)

# Fix build.prop
$SED -i \
	-e '/ro\.kernel\.android\.checkjni/d' \
	-e '/ro\.build\.type/s/eng/user/' \
	$REPACK/ota/system/build.prop

# Delete OSE specific files
if [ -f $ANDROID_BUILD_TOP/vendor/ose/tools/squisher.rm ]; then
	for RM_FILE in `cat $ANDROID_BUILD_TOP/vendor/ose/tools/squisher.rm`; do
		rm -f $REPACK/ota/$RM_FILE
	done
fi

# Delete target product specific files
if [ -f $ANDROID_BUILD_TOP/vendor/ose/tools/$TARGET_PRODUCT-squisher.rm ]; then
	for RM_FILE in `cat $ANDROID_BUILD_TOP/vendor/ose/tools/$TARGET_PRODUCT-squisher.rm`; do
		rm -f $REPACK/ota/$RM_FILE
	done
fi

# Delete unnecessary binaries
( cd $REPACK/ota/system/bin; echo $DELETE_BINS | xargs rm -f; )

# No need for recovery
rm -rf $REPACK/ota/recovery

# Strip modules
[ -d $REPACK/ota/system/lib/modules ] && \
	find $REPACK/ota/system/lib/modules -name "*.ko" -print0 | xargs -0 arm-eabi-strip --strip-unneeded

# Determine what to name the new signed package
if [ -z "$CYANOGEN_NIGHTLY" ]; then
	CMVERSION=`grep 'ro.ose.version=' $REPACK/ota/system/build.prop | sed -e 's/ro.ose.version=//g'`
	ABIGEN=`grep 'ro.product.cpu.abi=' $REPACK/ota/system/build.prop | sed -e 's/ro.product.cpu.abi=//g'`
	OUTFILE=$OUT/$CMVERSION.zip
	echo -e ""; echo -e "${ppl}OSE${bldylw}-2.0.0${txtrst}:${cya} $CMVERSION"${txtrst}; echo -e ""
else
	OUTFILE=$OUT/update-squished.zip
fi



if [ -n $ABIGEN ]; then
	echo ${cya}"Packing in Pre-Built Libs for CPU Variant:${ylw}$ABIGEN"${txtrst}
	cp ${ANDROID_BUILD_TOP}/vendor/ose/prebuilt/libs/$ABIGEN/libbypass.so $REPACK/ota/system/lib/libbypass.so
	echo ""
fi

# Pack it up and sign
echo -e ${grn}"Zipping package..."${txtrst}
( cd $REPACK/ota; zip $QUIET -r $REPACK/update.zip . )
echo -e ${grn}"Signing package..."${txtrst}
SECURITYDIR=$ANDROID_BUILD_TOP/build/target/product/security
java -Xmx1024m \
	-jar $OUTDIR/host/$OUT_TARGET_HOST/framework/signapk.jar \
	-w $SECURITYDIR/testkey.x509.pem $SECURITYDIR/testkey.pk8 \
	$REPACK/update.zip $OUTFILE
echo -e ${grn}"Cleaning up..."${txtrst}
rm -rf $REPACK

# Create a md5 checksum image of the repacked package
(
img=`basename $OUTFILE`
cd `dirname $OUTFILE`
$MD5 $img >$img.md5sum
ZIPSIZE=`ls -lah $OUTFILE | awk '{ print $5}'`
echo -e ""; echo -e ${cya}"Package complete:${ylw} $OUTFILE"${txtrst}
echo -e ${cya}"ZIP:${ylw}  $img"${txtrst}
echo -e ${cya}"MD5: ${ylw} `cat $img.md5sum | awk '{print $1}'`"${txtrst}
echo -e ${cya}"SIZE:${ylw} $ZIPSIZE"${txtrst}
MD5VAL=`cat $img.md5sum  | awk '{ print $1 }'`
DEVICE=`echo -e $TARGET_PRODUCT | cut -d "_" -f 2`

echo -e ""
echo -e ${bldylw}"####################################"
echo -e "#    /OOOOOO   /SSSSSS  /EEEEEEEE  #"
echo -e "#   /OO__  OO /SS__  SS| EE_____/  #"
echo -e "#  | OO  \ OO| SS  \__/| EE        #"
echo -e "#  | OO  | OO|  SSSSSS | EEEEE     #"
echo -e "#  | OO  | OO \____  SS| EE__/     #"
echo -e "#  | OO  | OO /SS  \ SS| EE        #"
echo -e "#  |  OOOOOO/|  SSSSSS/| EEEEEEEE  #"
echo -e "#   \______/  \______/ |________/  #"
echo -e "####################################"
echo -e "#      Open Source Evolution       #"
echo -e "####################################"${txtrst}
echo -e ""
)

exit 0
